#!/bin/bash

#initialize variables
my_hostname=$(hostname)
if [ "x$new_domain_name" != x ]; then
	my_domain=${new_domain_name}
elif [ "x$old_domain_name" != x ]; then
	my_domain=${old_domain_name}
else
	my_domain=localdomain
fi
old_fqdn_name=${my_hostname}.${old_domain_name}
new_fqdn_name=${my_hostname}.${my_domain}
new_hostnames="${new_fqdn_name}\t${my_hostname}"
altnames=""
old_hostentry=""
lanif=$(/opt/bubba/bin/bubba-networkmanager-cli getlanif)


#sanitize files accessed by this script
sed -i "s/$//" /etc/hosts
sed -i "s/$//" /etc/resolv.conf


# add loopback entry if missing
localhost_entry=$(grep "^127.0.0.1" /etc/hosts)
if [ "x${localhost_entry}" = "x" ]; then
	echo -e "127.0.0.1\tlocalhost" >> /etc/hosts
fi


# add search entry to resolv.conf
if [ "x$new_domain_search" != x ]; then
	search_entry=$(grep "^search" /etc/resolv.conf)
	if [ "x${search_entry}" != "x" ]; then
		sed -i "/^search/csearch ${new_domain_search}" /etc/resolv.conf
	else
		echo  "search ${new_domain_search}" >> /etc/resolv.conf
	fi
elif [ "x$new_domain_name" != x ]; then
	search_entry=$(grep "^search" /etc/resolv.conf)
	if [ "x${search_entry}" != "x" ]; then
		sed -i "/^search/csearch ${new_domain_name}" /etc/resolv.conf
	else
		echo "search ${new_domain_name}" >> /etc/resolv.conf
	fi
fi


# update hosts file with new ip address for my name
if [ "${interface}" = "${lanif}" ]; then
	# locate entry created by bubba-networkmanager when switching from static assignment to dhcp
	bubbadynamic_entry=$(grep "^256.0.0.1" /etc/hosts)
	if [ "x${bubbadynamic_entry}" != "x" ]; then
		if [ "x${new_ip_address}" != "x" ]; then
			sed -i "s/^${bubbadynamic_entry}/${new_ip_address}/" /etc/hosts
			new_ip_address=""
		fi
	fi

	if [ "x${old_ip_address}" != "x" ]; then 
		old_hostentry=$(grep "^${old_ip_address}\s" /etc/hosts)
		if [ "x${old_hostentry}" != "x" ]; then
			#keep alternate names if defined
			needle=$(echo "^${old_ip_address}\$|${my_hostname}\$|${old_fqdn_name}\$|${new_fqdn_name}\$|localhost|^\$"| sed "s/\./\\\./g")
			altnames=$(echo $(echo ${old_hostentry} | sed "s/\s\s*/\n/g" | eval "grep -vP \"${needle}\"") | sed "s/\s\s*/\t/")
			if [ "x${altnames}" != "x" ]; then
				echo -n $(echo -n ${altnames}) >> /tmp/.dhclient-keepaltnames
			fi
			sed -i "/^${old_ip_address}\s/d" /etc/hosts
		fi
	fi

	if [ "x${new_ip_address}" != "x" ]; then
		old_hostentry=$(grep "^${new_ip_address}\s" /etc/hosts)
		if [ "x${old_hostentry}" != "x" ]; then
			#keep alternate names if defined
			needle=$(echo "^${new_ip_address}\$|${my_hostname}\$|${old_fqdn_name}\$|${new_fqdn_name}\$|localhost|^\$"| sed "s/\./\\\./g")
			altnames=$(echo $(echo ${old_hostentry} | sed "s/\s\s*/\n/g" | eval "grep -vP \"${needle}\"") | sed "s/\s\s*/\t/")
			if [ "x${altnames}" != "x" ]; then
				new_hostnames="${new_fqdn_name}\t${my_hostname}\t${altnames}"
			fi
			sed -i "/^${new_ip_address}\s/c${new_ip_address}\t${new_hostnames}" /etc/hosts
		else
			if [ -e /tmp/.dhclient-keepaltnames ]; then
				new_hostnames="${new_fqdn_name}\t${my_hostname}\t$(cat /tmp/.dhclient-keepaltnames)"
				rm -f /tmp/.dhclient-keepaltnames
			fi
			echo -e "${new_ip_address}\t${new_hostnames}" >> /etc/hosts
		fi
	fi
fi
