diff -ruN a/controllers/InterfaceController.cpp b/controllers/InterfaceController.cpp
--- a/controllers/InterfaceController.cpp	2020-05-23 21:47:15.816850251 +0200
+++ b/controllers/InterfaceController.cpp	2020-05-23 21:27:29.488143139 +0200
@@ -635,6 +635,9 @@
 	return do_call("initd=$(/sbin/rc-service -ir net."+ifname+") && ${initd} -D stop")==0;
 }
 
+bool InterfaceController::Restart(const string& ifname){
+	return do_call("initd=$(/sbin/rc-service -ir net."+ifname+") && ${initd} restart") == 0;
+}
 
 InterfaceController::~InterfaceController(){
 }
diff -ruN a/controllers/InterfaceController.h b/controllers/InterfaceController.h
--- a/controllers/InterfaceController.h	2010-06-09 15:24:26.000000000 +0200
+++ b/controllers/InterfaceController.h	2020-05-23 21:27:57.700683221 +0200
@@ -59,6 +59,7 @@
 
 	static bool Up(const string& ifname);
 	static bool Down(const string& ifname);
+	static bool Restart(const string& ifname);
 
 	void SetStaticCfg(const string& ifname, const Json::Value& cfg);
 	void SetDynamicCfg(const string& ifname, const Json::Value& cfg);
diff -ruN a/Dispatcher.cpp b/Dispatcher.cpp
--- a/Dispatcher.cpp	2020-05-23 21:47:26.608056983 +0200
+++ b/Dispatcher.cpp	2020-05-23 21:52:24.460762936 +0200
@@ -241,6 +241,7 @@
 		}
 
 		InterfaceController& ifc = InterfaceController::Instance();
+		cfg.Update("lanif",newif);
 
 		try{
 			auto_ptr<Interface> in = ifc.GetInterface(olf);
@@ -326,24 +327,28 @@
 			}
 			if(!res["status"]){
 				// Try restoring original settings
+				cfg.Update("lanif",olf);
 				in->SetConfigurations(ocfgsave);
 				InterfaceController::Up(olf);
 			}else{
 				// "Deactivate" old interface
 				InterfaceController::Instance().SetRawCfg(olf,Json::Value(Json::objectValue));
 				InterfaceController::Down(olf);
-				// Pick up new if
-				InterfaceController::Up(newif);
 
 				// If this was a move from two wlan (bridge) update rc.d
 				if(newiftype=="bridge"){
+					system("ln -s net.lo /etc/init.d/net.br0");
 					list<int> start,stop;
 					start.push_back(2);
-					Services::Enable("ifup-br0",19,start,0,stop);
+					Services::Enable("net.br0",19,start,0,stop);
 				}else{
-					Services::Disable("ifup-br0");
+					Services::Disable("net.br0");
+					system("rm /etc/init.d/net.br0");
 				}
 
+				// Pick up new if
+				InterfaceController::Restart(newif);
+
 			}
 		}catch(runtime_error& err){
 			res["status"]=false;
@@ -475,9 +480,7 @@
 
 	if(v.isMember("ifname") && v["ifname"].isString()){
 
-		if(InterfaceController::Down(v["ifname"].asString())
-				&& InterfaceController::Up(v["ifname"].asString())){
-
+		if(InterfaceController::Restart(v["ifname"].asString())){
 			res["status"]=true;
 		}else{
 			res["status"]=false;
@@ -499,6 +502,7 @@
 Dispatcher::Result Dispatcher::getdefaultroute(EUtils::UnixClientSocket *con, const Json::Value & v){
 	Json::Value res(Json::objectValue);
 	res["status"]=true;
+	Route::Instance().Refresh();
 	res["gateway"]=Route::Instance().Default()["gateway"];
 	this->send_jsonvalue(con,res);
 
diff -ruN a/utils/include/netifrc.h b/utils/include/netifrc.h
--- a/utils/include/netifrc.h	1970-01-01 01:00:00.000000000 +0100
+++ b/utils/include/netifrc.h	2020-05-23 22:05:37.845960823 +0200
@@ -0,0 +1,184 @@
+#pragma once
+
+#include <string>
+#include <vector>
+#include <arpa/inet.h>
+
+namespace netifrc {
+
+	namespace config {
+		namespace type {
+			enum value
+			{
+				OTHER,
+				CONFIG,
+				ROUTES,
+				BRIDGE_PORTS,
+				CONTROL,
+				MODULES,
+				DHCP_PARAMETERS,
+				FALLBACK,
+				BRIDGE_DEPRECATED_CTL
+			};
+
+		}; // namespace type
+
+		namespace argumentstatus {
+			enum value
+			{
+				FINISHED,
+				WANT,
+				READING
+			};
+
+		}; // namespace argumentstatus
+	}; // namespace config
+
+
+	static const std::string config_header 	= "# This file is managed by bubba-networkmanager\n";
+	static const std::string modules_main	= "modules=\"iproute2\"\n";
+	static const std::string rfkill_unblock	= "preup() {\n  if [ \"${IFACE}\" = \"wlan0\" ] ; then\n     rfkill unblock all\n  fi\n  return 0\n}";
+
+	static const std::string if_header	= "# setup for {if} (lan Ethernet port)\n";
+	static const std::string if_auto	= "config_{if}=\"dhcp\"\ndhcpcd_{if}=\"-t 15\"\n";
+	static const std::string if_manual	= "config_{if}=\"{addr} netmask {mask} brd {brd}\"\n";
+	static const std::string if_nonet	= "config_{if}=\"null\"\nrc_net_{if}_provide=\"!net\"\n";
+
+	static const std::string eth1_fallback	= "fallback_eth1=\"192.168.10.1 netmask 255.255.255.0 brd 192.168.10.255\"\n";
+	static const std::string modules_wlan	= "modules_{if}=\"!iw !iwconfig !wpa_supplicant\"\n";
+	static const std::string bridge_entry	= "bridge_{if}=\"{members}\"\nbridge_forward_delay_{if}=0\nbridge_hello_time_{if}=1000\nbridge_stp_state_{if}=1\n";
+	static const std::string wlan_extra_header	= "# (this will be owned by hostapd, if present on your system)\n";
+
+	static const std::string preup_function	= "\npreup() {\n  # prevent hostapd failure due to soft-blocked radio\n  if [ \"${IFACE}\" = \"wlan0\" ] ; then\n     rfkill unblock all\n  fi\n\n  # test WAN link\n  if [ \"${IFACE}\" = \"eth0\" ]; then\n    if (mii-tool \"${IFACE}\" | grep -q 'no link'); then\n      ewarn \"No link on ${IFACE}, aborting configuration\"\n      return 1\n    fi\n  fi\n\n  return 0\n}\n";
+
+	static std::string mk_bridge_entry(const std::string bridge, const std::vector<std::string> bridge_ports)
+	{
+		std::string result;
+		std::string portlist;
+
+		std::string header = netifrc::if_header;
+		header.replace(22, 13, "bridge");
+		header.replace(12, 4, bridge);
+		result.append(header);
+
+		for (int j = 0; j < static_cast<int>(bridge_ports.size()); j++)
+		{
+			if (!bridge_ports[j].empty())
+			{
+				if (j > 0)
+					portlist.append(" ");
+				portlist.append(bridge_ports[j]);
+
+				std::string member = netifrc::if_nonet;
+				member.replace(26, 4, bridge_ports[j]);
+				member.replace(7, 4, bridge_ports[j]);
+				if (bridge_ports[j].substr(0,2) == "wl")
+				{
+					member.insert(0, modules_wlan);
+					member.replace(8, 4, bridge_ports[j]);
+					member.append("rc_net_");
+					member.append(bridge);
+					member.append("_need=\"hostapd\"\n");
+				}
+				result.append(member);
+			}
+		}
+
+		std::string newbridge = netifrc::bridge_entry;
+		newbridge.replace(97, 4, bridge);
+		newbridge.replace(70, 4, bridge);
+		newbridge.replace(45, 4, bridge);
+		newbridge.replace(13, 9, portlist);
+		newbridge.replace(7, 4, bridge);
+
+		result.append(newbridge);
+		return result;
+	}
+
+	static std::string mk_config_line(const std::string ifname, const std::string address, const std::string netmask = "")
+	{
+		if (address.empty())
+			return "";
+
+		std::string result;
+		if (ifname != "br0")
+		{
+			int offset = 12;
+			result = netifrc::if_header;
+			if (ifname == "eth0")
+				result.replace(18, 1, "w");
+			else if (ifname == "wlan0")
+			{
+				result.replace(18, 17, "WiFi adaptor");
+				result.insert(2, "null ");
+				offset += 5;
+				result.append(netifrc::wlan_extra_header);
+				std::string modules = netifrc::modules_wlan;
+				modules.replace(8, 4, ifname);
+				result.append(modules);
+			}
+			result.replace(offset, 4, ifname);
+		}
+
+		if (address == "dhcp")
+		{
+			std::string autoconf = netifrc::if_auto;
+			autoconf.replace(26, 4, ifname);
+			autoconf.replace(7, 4, ifname);
+			result.append(autoconf);
+			if (ifname == "eth1")
+				result.append(netifrc::eth1_fallback);
+			return result;
+		}
+		if (address == "0.0.0.0")
+		{
+			std::string nullconf = netifrc::if_nonet;
+			nullconf.replace(26, 4, ifname);
+			nullconf.replace(7, 4, ifname);
+			result.append(nullconf);
+			return result;
+		}
+
+		struct in_addr s_ipaddress;
+		struct in_addr s_netmask;
+		inet_aton(address.c_str(), &s_ipaddress);
+		inet_aton(netmask.c_str(), &s_netmask);
+		s_ipaddress.s_addr |= ~(s_netmask.s_addr);
+		std::string broadcast = inet_ntoa(s_ipaddress);
+
+		std::string manualconf = netifrc::if_manual;
+		manualconf.replace(39, 5, broadcast);
+		manualconf.replace(28, 6, netmask);
+		manualconf.replace(13, 6, address);
+		manualconf.replace(7, 4, ifname);
+		result.append(manualconf);
+		return result;
+	}
+
+	static std::string mk_routes_line(const std::string ifname, const std::vector<std::string> routes)
+	{
+		int i = 0;
+		std::string result;
+		for (int j = 0; j < static_cast<int>(routes.size()); j++)
+		{
+			if (!routes[j].empty())
+			{
+				if (i == 0)
+					result.append("routes_" + ifname + "=\"");
+				else
+					result.append("\n             ");
+
+				result.append(routes[j]);
+				i++;
+			}
+		}
+		if (i == 0)
+			return "";
+		if (i > 1)
+			result.append("\n\"");
+		else
+			result.append("\"");
+		return result;
+	}
+
+}; // namespace netifrc
diff -ruN a/utils/InterfacesCfg.cpp b/utils/InterfacesCfg.cpp
--- a/utils/InterfacesCfg.cpp	2020-05-23 21:47:26.609057002 +0200
+++ b/utils/InterfacesCfg.cpp	2020-05-23 22:06:00.043386010 +0200
@@ -22,8 +22,10 @@
     $Id$
 */
 
+#include "include/netifrc.h"
+
+#include <string>
 #include <iostream>
-#include <sstream>
 using namespace std;
 
 #include "InterfacesCfg.h"
@@ -34,38 +36,139 @@
 
 namespace NetworkManager{
 
-InterfacesCfg::InterfacesCfg():cfg(Json::objectValue){
+static const std::string handledInterfaces[4] = {"eth0", "eth1", "br0", "wlan0"};
+
+InterfacesCfg::InterfacesCfg():cfg(Json::objectValue)
+{
 	this->parse_cfg();
 }
 
-InterfacesCfg& InterfacesCfg::Instance(){
+InterfacesCfg& InterfacesCfg::Instance()
+{
 	static InterfacesCfg cfg;
 
 	return cfg;
 }
 
-void InterfacesCfg::parse_cfg(){
-	list<string> fil=FileUtils::GetContent(IFSFILE);
-	string curif;
-	for(list<string>::iterator fIt=fil.begin();fIt!=fil.end();fIt++){
-		string line=StringTools::Trimmed(*fIt," \t");
-		if(line=="" or line[0]=='#'){
+bool InterfacesCfg::is_handled_interface(std::string ifname)
+{
+	int i = 0;
+	int s = static_cast<int>(sizeof(handledInterfaces)) - 1;
+	while ((s > 0) && (handledInterfaces[i] != ifname))
+	{
+		s -= static_cast<int>(sizeof(handledInterfaces[i]));
+		i++;
+	}
+	if (s < 0)
+		return false;
+	return true;
+}
+
+void InterfacesCfg::parse_cfg()
+{
+	list<std::string> fil = FileUtils::GetContent(IFSFILE);
+	netifrc::config::type::value eItemType = netifrc::config::type::OTHER;
+	netifrc::config::argumentstatus::value eArgumentStatus = netifrc::config::argumentstatus::FINISHED;
+
+	std::string curif;
+	for(list<string>::iterator fIt=fil.begin(); fIt!=fil.end(); fIt++)
+	{
+		std::string line = StringTools::Trimmed(*fIt, " \t");
+
+		if ((line == "") or (line[0] == '#'))
+			continue;
+
+		std::string line7 = line.substr(0,7);
+		if (line7 == "config_")
+			eItemType = netifrc::config::type::CONFIG;
+		else if (line7 == "routes_")
+			eItemType = netifrc::config::type::ROUTES;
+		else if (line7 == "bridge_")
+			eItemType = netifrc::config::type::BRIDGE_PORTS;
+		else if (eArgumentStatus == netifrc::config::argumentstatus::FINISHED)
+			continue;
+
+		std::string arguments;
+		if (eItemType != netifrc::config::type::OTHER)
+		{
+			eArgumentStatus = netifrc::config::argumentstatus::WANT;
+			size_t argsep = line.find_first_of("=");
+			curif = line.substr(7, (argsep - 7));
+			if (curif.size() > 7)	// sysfs entry
+				continue;
+			arguments = line.substr(argsep + 1);
+			if (arguments == "")
+				continue;
+		}
+		else
+			arguments = line;
+
+		if (!is_handled_interface(curif))
+		{
+			eArgumentStatus = netifrc::config::argumentstatus::FINISHED;
+			// eItemType = NET_OTHER;
 			continue;
 		}
-		list<string> words=StringTools::Split(*fIt,"[ \t]");
-		if(words.size()>1){
-			if(words.front()=="auto"){
-				curif=words.back();
-				this->cfg[curif]["auto"]=true;
-			}else if(words.front()=="iface"){
-				words.pop_front();
-				curif=words.front();
-				this->cfg[curif]["addressing"]=words.back();
-			}else{
-				string key=words.front();
+
+		if (arguments.substr(0,1) == "\"")
+		{
+			if (eArgumentStatus == netifrc::config::argumentstatus::WANT)
+			{
+				eArgumentStatus = netifrc::config::argumentstatus::READING;
+				arguments = arguments.substr(1);
+			}
+			else
+			{
+				eArgumentStatus = netifrc::config::argumentstatus::FINISHED;
+				continue;
+			}
+		}
+
+		if (eArgumentStatus == netifrc::config::argumentstatus::READING)
+		{
+			if (arguments.substr(arguments.size()-1, 1) == "\"")
+			{
+				eArgumentStatus = netifrc::config::argumentstatus::FINISHED;
+				arguments.resize(arguments.size() - 1);
+			}
+			list<std::string> words = StringTools::Split(arguments, "[ \t]");
+
+			if (eItemType == netifrc::config::type::ROUTES)
+			{
+				this->cfg[curif]["options"]["routes"].append(arguments);
+			}
+			else if (eItemType == netifrc::config::type::BRIDGE_PORTS)
+			{
+				while (!words.empty())
+				{
+					this->cfg[curif]["options"]["bridge_ports"].append(words.front());
+					words.pop_front();
+				}
+ 			}
+			else if (words.front() == "dhcp")
+			{
+				this->cfg[curif]["addressing"] = "dhcp";
+			}
+			else if (words.front() == "null")
+			{
+				this->cfg[curif]["addressing"] = "static";
+				this->cfg[curif]["options"]["address"].append("0.0.0.0");
+				this->cfg[curif]["options"]["netmask"].append("0.0.0.0");
+			}
+			else if (words.front() == "default")
+			{
+				this->cfg[curif]["options"]["gateway"].append(words.back());
+			}
+			else
+			{
+				this->cfg[curif]["addressing"]="static";
+				this->cfg[curif]["options"]["address"].append(words.front());
 				words.pop_front();
-				for(list<string>::iterator sIt=words.begin();sIt!=words.end();sIt++){
-					this->cfg[curif]["options"][key].append(*sIt);
+				while (!words.empty()){
+					string key=words.front();
+					words.pop_front();
+ 					this->cfg[curif]["options"][key].append(words.front());
+					words.pop_front();
 				}
 			}
 		}
@@ -81,42 +184,248 @@
 	return true;
 }
 
-bool InterfacesCfg::Commit(){
+bool InterfacesCfg::Commit()
+{
+	Json::Value devs = this->cfg;
+	list<std::string> fil = FileUtils::GetContent(IFSFILE);
+	netifrc::config::type::value eItemType = netifrc::config::type::OTHER;
+	netifrc::config::argumentstatus::value eArgumentStatus = netifrc::config::argumentstatus::FINISHED;
+	string curif = "";
+	bool have_empty_line = false;
+	list<std::string> res;
+
+	if (devs.isMember("br0"))
+	{
+		devs.removeMember("eth1");
+		devs.removeMember("wlan0");
+	}
+
+	bool have_preup = false;
+	for (list<std::string>::iterator fIt = fil.begin(); (!have_preup && (fIt != fil.end())); fIt++)
+	{
+		std::string line = StringTools::Trimmed(*fIt, " \t");
+		if (line.substr(0,7) == "preup()")
+		{
+			have_preup = true;
+		}
+	}
+
+	res.push_back(netifrc::config_header);
+	res.push_back(netifrc::modules_main);
+	if (!have_preup)
+		res.push_back(netifrc::preup_function);
+
+	bool inHeader = true;
+	for (list<std::string>::iterator fIt = fil.begin(); fIt != fil.end(); fIt++)
+	{
+		std::string line = StringTools::Trimmed(*fIt, " \t");
+		if ((line[0] == '#') && inHeader)
+			continue;
+		else
+			inHeader = false;
+
+		if (line.empty())
+		{
+			if (!have_empty_line)
+			{
+				res.push_back("\n");
+				have_empty_line = true;
+			}
+			continue;
+		}
+
+		if (line[0] == '#')
+		{
+			if ((line.size() > 7) && (line.substr(2,5) == "setup"))
+				continue;
+			if ((line.size() > 12) && (line.substr(2,10) == "null setup"))
+				continue;
+			if ((line.size() > 32) && (line.substr(25,7) == "hostapd"))
+				continue;
+			res.push_back(*fIt + "\n");
+			continue;
+		}
+
+		if ((line.substr(0,7) == "modules") && (line.substr(7,1) != "_"))
+			continue;
+
+		std::string line7 = line.substr(0,7);
+		if (line7 == "config_")
+			eItemType = netifrc::config::type::CONFIG;
+		else if (line7 == "routes_")
+			eItemType = netifrc::config::type::ROUTES;
+		else if (line7 == "bridge_")
+			eItemType = netifrc::config::type::BRIDGE_PORTS;
+		else if (line7 == "rc_net_")
+			eItemType = netifrc::config::type::CONTROL;
+		else if (line7 == "dhcpcd_")
+			eItemType = netifrc::config::type::DHCP_PARAMETERS;
+		else if (line.substr(0,9) == "fallback_")
+			eItemType = netifrc::config::type::FALLBACK;
+		else if (line.substr(0,8) == "modules_")
+			eItemType = netifrc::config::type::MODULES;
+		else if (line.substr(0,6) == "brctl_")
+			eItemType = netifrc::config::type::BRIDGE_DEPRECATED_CTL;
+		else if (eArgumentStatus == netifrc::config::argumentstatus::FINISHED)
+		{
+			res.push_back(*fIt + "\n");
+			have_empty_line = false;
+			continue;
+		}
+
+		std::string arguments;
+		if (eItemType != netifrc::config::type::OTHER)
+		{
+			eArgumentStatus = netifrc::config::argumentstatus::WANT;
+			int argsep = static_cast<int>(line.find_first_of("="));
+			int offset = 7;
+			if (eItemType == netifrc::config::type::BRIDGE_DEPRECATED_CTL)
+				offset--;
+			else if (eItemType == netifrc::config::type::MODULES)
+				offset++;
+			else if (eItemType == netifrc::config::type::FALLBACK)
+				offset += 2;
+			curif = line.substr(offset, (argsep - offset));
+			arguments = line.substr(argsep + 1);
+		}
+		else
+			arguments = line;
+
+
+		if (eItemType == netifrc::config::type::CONTROL)
+		{
+			std::string rcnet = curif;
+			size_t argsep = rcnet.find_first_of("_");
+			curif = rcnet.substr(0, argsep);
+		}
+
+		if ((eItemType == netifrc::config::type::BRIDGE_PORTS) && (curif.size() > 7))	// sysfs entry
+		{
+			std::string sysfs = curif;
+			size_t argsep = sysfs.find_last_of("_");
+			curif = sysfs.substr(argsep + 1);
+		}
+
+		if (arguments.substr(0,1) == "\"")
+		{
+			if (eArgumentStatus == netifrc::config::argumentstatus::WANT)
+				eArgumentStatus = netifrc::config::argumentstatus::READING;
+			else
+				eArgumentStatus = netifrc::config::argumentstatus::FINISHED;
+		}
+
+		if ((eArgumentStatus == netifrc::config::argumentstatus::READING) && (arguments.substr(arguments.size() - 1, 1) == "\""))
+			eArgumentStatus = netifrc::config::argumentstatus::FINISHED;
 
-	Json::Value::Members mem=this->cfg.getMemberNames();
-	stringstream ss;
-	list<string> res;
-	for(Json::Value::Members::iterator mIt=mem.begin();mIt!=mem.end();mIt++){
-		Json::Value val=this->cfg[*mIt];
-		if(val.isMember("auto")){
-			res.push_back("auto "+*mIt+"\n");
-		}
-		res.push_back("iface "+*mIt+" inet "+val["addressing"].asString()+"\n");
-
-		Json::Value::Members opts=val["options"].getMemberNames();
-		for(Json::Value::Members::iterator oIt=opts.begin();oIt!=opts.end();oIt++){
-
-			ss << "\t"<<*oIt;
-			Json::Value opval=val["options"][*oIt];
-			for(size_t i=0; i<val["options"][*oIt].size();i++){
-				ss << " "<< val["options"][*oIt][i].asString();
-			}
-			ss<<endl;
-			res.push_back(ss.str());
-			ss.str("");
-;		}
+		if (!is_handled_interface(curif))
+		{
+			if ((eItemType == netifrc::config::type::CONFIG) && (eArgumentStatus == netifrc::config::argumentstatus::FINISHED))
+				cout << "Keep device " << curif << " : not handled by this application\n";
+			curif = "";
+			res.push_back(*fIt + "\n");
+			have_empty_line = false;
+			eArgumentStatus = netifrc::config::argumentstatus::FINISHED;
+			continue;
+		}
+
+		if (!devs.isMember(curif))
+		{
+			if ((eItemType == netifrc::config::type::CONFIG) && (eArgumentStatus == netifrc::config::argumentstatus::FINISHED))
+				cout << "Remove device " << curif << " : not part of new configuration\n";
+			continue;
+		}
 
-		res.push_back("\n");
+		if ((eItemType == netifrc::config::type::CONFIG) && (eArgumentStatus == netifrc::config::argumentstatus::FINISHED))
+		{
+			if (!have_empty_line)
+				res.push_back("\n");
+			have_empty_line = false;
+
+			cout << "Change config for device " << curif << "\n";
+			Json::Value NIC = devs[curif]["options"];
+			int i=0;
+			if (NIC.isMember("bridge_ports"))
+			{
+
+				std::vector<std::string> bridge_ports;
+				for (int j = 0; j < static_cast<int>(NIC["bridge_ports"].size()); j++)
+				{
+					bridge_ports.push_back(NIC["bridge_ports"][j].asString());
+				}
+                                res.push_back(netifrc::mk_bridge_entry(curif, bridge_ports));
+			}
+
+			if (devs[curif]["addressing"] == "dhcp")
+                                res.push_back(netifrc::mk_config_line(curif, "dhcp"));
+			else if (NIC["address"][i].asString()=="0.0.0.0")
+			{
+                                res.push_back(netifrc::mk_config_line(curif, NIC["address"][i].asString()));
+				NIC.removeMember("gateway");
+				NIC.removeMember("routes");
+			}
+			else if (NIC["address"][i].asString()!="")
+                                res.push_back(netifrc::mk_config_line(curif, NIC["address"][i].asString(), NIC["netmask"][i].asString()));
+
+			std::vector<std::string> routes;
+			if (NIC.isMember("routes"))
+			{
+				for (int j = 0; j < static_cast<int>(NIC["routes"].size()); j++)
+					routes.push_back(NIC["routes"][j].asString());
+			}
+			if (NIC.isMember("gateway") && (NIC["gateway"][i].asString() != "0.0.0.0"))
+				routes.push_back("default via " + NIC["gateway"][i].asString());
+			if (routes.size() > 0)
+                                res.push_back(netifrc::mk_routes_line(curif, routes));
+
+			devs.removeMember(curif);
+		}
+		curif="";
 	}
-	FileUtils::Write(IFSFILE,res,0644);
-	return true;
-}
 
+	Json::Value::Members opts=devs.getMemberNames();
+	for(Json::Value::Members::iterator oIt=opts.begin();oIt!=opts.end();oIt++){
+		if (!have_empty_line)
+			res.push_back("\n");
+		have_empty_line = false;
+
+		cout << "Add config for device " << *oIt << "\n";
+		Json::Value NIC = devs[*oIt]["options"];
+		int i = 0;
+		if (NIC.isMember("bridge_ports"))
+		{
+			std::vector<std::string> bridge_ports;
+			for (int j = 0; j < static_cast<int>(NIC["bridge_ports"].size()); j++)
+			{
+				bridge_ports.push_back(NIC["bridge_ports"][j].asString());
+			}
+                               res.push_back(netifrc::mk_bridge_entry(*oIt, bridge_ports));
+		}
+		if (devs[*oIt]["addressing"] == "dhcp")
+			res.push_back(netifrc::mk_config_line(curif, "dhcp"));
+		else if (NIC["address"][i].asString() == "0.0.0.0")
+		{
+			res.push_back(netifrc::mk_config_line(*oIt, NIC["address"][i].asString()));
+			NIC.removeMember("gateway");
+			NIC.removeMember("routes");
+		}
+		else if (NIC["address"][i].asString() != "")
+			res.push_back(netifrc::mk_config_line(*oIt, NIC["address"][i].asString(), NIC["netmask"][i].asString()));
 
-InterfacesCfg::~InterfacesCfg(){
+		if (NIC.isMember("gateway") && (NIC["gateway"][i].asString() != "0.0.0.0"))
+		{
+			std::vector<std::string> routes;
+			routes.push_back("default via " + NIC["gateway"][i].asString());
+			res.push_back(netifrc::mk_routes_line(*oIt, routes));
+		}
+	}
 
+	cout << "Write config\n";
+	FileUtils::Write(IFSFILE, res, 0644);
+	return true;
 }
 
+InterfacesCfg::~InterfacesCfg(){
 }
 
 
+}
diff -ruN a/utils/InterfacesCfg.h b/utils/InterfacesCfg.h
--- a/utils/InterfacesCfg.h	2020-05-23 21:47:26.609057002 +0200
+++ b/utils/InterfacesCfg.h	2020-05-20 11:35:06.922576831 +0200
@@ -26,7 +26,7 @@
 #define INTERFACESCFG_H_
 
 //#define IFSFILE "interfaces"
-#define IFSFILE "/etc/network/interfaces"
+#define IFSFILE "/etc/conf.d/net"
 
 #include <libeutils/json/json.h>
 
@@ -41,6 +41,7 @@
 	InterfacesCfg& operator=(const InterfacesCfg& cfg);
 
 	void parse_cfg();
+	bool is_handled_interface(std::string ifname);
 public:
 	static InterfacesCfg& Instance();
 
